spring:
  datasource:
    url: jdbc:${DB_KIND:postgresql}://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:product_change_db}
    username: ${DB_USERNAME:phonebill_user}
    password: ${DB_PASSWORD:phonebill_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000      
  # JPA 설정
  jpa:
    show-sql: ${SHOW_SQL:true}
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
    hibernate:
      ddl-auto: ${DDL_AUTO:update}
      
  # Redis 설정
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
      database: ${REDIS_DATABASE:2}
      
  # Cache 개발 설정 (TTL 단축)
  cache:
    redis:
      time-to-live: 3600000 # 1시간 (개발환경에서 단축)

# Server 개발 설정
server:
  port: ${SERVER_PORT:8083}
  error:
    include-stacktrace: always
    include-message: always
    include-binding-errors: always

# Logging 개발 설정
logging:
  level:
    com.unicorn.phonebill: ${LOG_LEVEL_APP:DEBUG}
    org.springframework.security: ${LOG_LEVEL_SECURITY:DEBUG}
    org.hibernate.SQL: ${LOG_LEVEL_SQL:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.web: DEBUG
    org.springframework.cache: DEBUG
  pattern:
    console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr([%thread]){faint} %clr(%-5level){spring} %clr(%logger{36}){cyan} - %msg%n"

# Management 개발 설정
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
      show-components: always
  info:
    env:
      enabled: true
  
# OpenAPI 개발 설정
springdoc:
  swagger-ui:
    enabled: true
    try-it-out-enabled: true
  api-docs:
    enabled: true
  show-actuator: true

# Resilience4j 개발 설정 (더 관대한 설정)
resilience4j:
  circuitbreaker:
    configs:
      default:
        failure-rate-threshold: 70
        minimum-number-of-calls: 3
        wait-duration-in-open-state: 5s
    instances:
      kosClient:
        failure-rate-threshold: 80
        wait-duration-in-open-state: 10s
        
  retry:
    instances:
      kosClient:
        max-attempts: 3
        wait-duration: 1s

# KOS Mock 서버 설정 (개발환경용)
kos:
  base-url: ${KOS_BASE_URL:http://localhost:9090/kos}
  connect-timeout: 5s
  read-timeout: 10s
  max-retries: 3
  retry-delay: 1s
  
  # Mock 모드 설정
  mock:
    enabled: ${KOS_MOCK_ENABLED:true}
    response-delay: 500ms # Mock 응답 지연 시뮬레이션
    
  endpoints:
    customer-info: /api/v1/customer/{lineNumber}
    product-info: /api/v1/product/{productCode}
    available-products: /api/v1/products/available
    product-change: /api/v1/product/change
    
  headers:
    api-key: ${KOS_API_KEY:dev-api-key}
    client-id: ${KOS_CLIENT_ID:product-service-dev}

# 비즈니스 개발 설정
app:
  product:
    cache:
      customer-info-ttl: ${PRODUCT_CACHE_CUSTOMER_INFO_TTL:600}    # 10분 (개발환경에서 단축)
      product-info-ttl: ${PRODUCT_CACHE_PRODUCT_INFO_TTL:300}     # 5분
      available-products-ttl: ${PRODUCT_CACHE_AVAILABLE_PRODUCTS_TTL:1800} # 30분
      product-status-ttl: ${PRODUCT_CACHE_PRODUCT_STATUS_TTL:300}      # 5분
      line-status-ttl: ${PRODUCT_CACHE_LINE_STATUS_TTL:180}         # 3분
    validation:
      enabled: ${PRODUCT_VALIDATION_ENABLED:true}
      strict-mode: ${PRODUCT_VALIDATION_STRICT_MODE:false} # 개발환경에서는 유연하게
    processing:
      async-enabled: ${PRODUCT_PROCESSING_ASYNC_ENABLED:false} # 개발환경에서는 동기 처리
      
  # 개발용 테스트 데이터
  test-data:
    enabled: ${TEST_DATA_ENABLED:true}
    customers:
      - lineNumber: "01012345678"
        customerId: "CUST001"
        customerName: "홍길동"
        currentProductCode: "PLAN001"
      - lineNumber: "01087654321" 
        customerId: "CUST002"
        customerName: "김철수"
        currentProductCode: "PLAN002"
    products:
      - productCode: "PLAN001"
        productName: "5G 베이직 플랜"
        monthlyFee: 45000
        dataAllowance: "50GB"
      - productCode: "PLAN002"
        productName: "5G 프리미엄 플랜" 
        monthlyFee: 65000
        dataAllowance: "100GB"
        
  security:
    jwt:
      secret: ${JWT_SECRET:dev-secret-key-for-testing-only}
      expiration: ${JWT_EXPIRATION:3600} # 1시간 (개발환경에서 단축)
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:*} # 개발환경에서만 허용
      
# DevTools 설정
spring.devtools:
  restart:
    enabled: true
    exclude: static/**,public/**,templates/**
  livereload:
    enabled: true
    port: 35729
  add-properties: true

# 디버깅 설정
debug: false
trace: false

# 개발 환경 정보
info:
  app:
    name: ${spring.application.name}
    description: Product-Change Service Development Environment
    version: ${spring.application.version}
    encoding: UTF-8
    java:
      version: ${java.version}
  build:
    artifact: ${project.artifactId:product-service}
    name: ${project.name:Product Service}
    version: ${project.version:1.0.0}
    time: ${build.time:2024-03-15T10:00:00Z}