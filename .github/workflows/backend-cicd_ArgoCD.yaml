name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  REGISTRY: acrdigitalgarage01.azurecr.io
  IMAGE_ORG: phonebill
  RESOURCE_GROUP: rg-digitalgarage-01
  AKS_CLUSTER: aks-digitalgarage-01

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_env.outputs.image_tag }}
      environment: ${{ steps.set_env.outputs.environment }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set Environment
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

          IMAGE_TAG=$(date '+%Y%m%d%H%M%S')
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Run tests
        run: ./gradlew test

      - name: Generate test report
        run: ./gradlew jacocoTestReport

      - name: SonarQube Scan
        if: github.event_name != 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          services=("api-gateway" "user-service" "bill-service" "product-service" "kos-mock")
          for service in "${services[@]}"; do
            ./gradlew :${service}:sonar \
              -Dsonar.projectKey=phonebill-${service}-${{ steps.set_env.outputs.environment }} \
              -Dsonar.projectName=phonebill-${service}-${{ steps.set_env.outputs.environment }} \
              -Dsonar.java.binaries=build/classes/java/main \
              -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
              -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
          done

  release:
    name: Build and Push Images
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set image tag environment variable
        run: |
          echo "IMAGE_TAG=${{ needs.build.outputs.image_tag }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${{ needs.build.outputs.environment }}" >> $GITHUB_ENV

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push images
        run: |
          services=("api-gateway" "user-service" "bill-service" "product-service" "kos-mock")

          for service in "${services[@]}"; do
            echo "Building and pushing $service..."

            docker build \
              --build-arg BUILD_LIB_DIR="${service}/build/libs" \
              --build-arg ARTIFACTORY_FILE="${service}.jar" \
              -f deployment/container/Dockerfile-backend \
              -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/${service}:${{ env.ENVIRONMENT }}-${{ env.IMAGE_TAG }} .

            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/${service}:${{ env.ENVIRONMENT }}-${{ env.IMAGE_TAG }}

            echo "✅ Successfully built and pushed ${service}:${{ env.ENVIRONMENT }}-${{ env.IMAGE_TAG }}"
          done

  update-manifest:
    name: Update Manifest Repository
    needs: [build, release]
    runs-on: ubuntu-latest

    steps:
    - name: Set image tag environment variable
      run: |
        echo "IMAGE_TAG=${{ needs.build.outputs.image_tag }}" >> $GITHUB_ENV
        echo "ENVIRONMENT=${{ needs.build.outputs.environment }}" >> $GITHUB_ENV

    - name: Update Manifest Repository
      run: |
        # 매니페스트 레포지토리 클론
        REPO_URL=$(echo "https://github.com/cna-bootcamp/phonebill-manifest.git" | sed 's|https://||')
        git clone https://${{ secrets.GIT_USERNAME }}:${{ secrets.GIT_PASSWORD }}@${REPO_URL} manifest-repo
        cd manifest-repo

        # Kustomize 설치
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

        # 매니페스트 업데이트
        cd phonebill/kustomize/overlays/${{ env.ENVIRONMENT }}

        # 각 서비스별 이미지 태그 업데이트
        services="api-gateway user-service bill-service product-service kos-mock"
        for service in $services; do
          kustomize edit set image acrdigitalgarage01.azurecr.io/phonebill/$service:${{ env.ENVIRONMENT }}-${{ env.IMAGE_TAG }}
        done

        # Git 설정 및 푸시
        cd ../../../..
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add .
        git commit -m "🚀 Update phonebill ${{ env.ENVIRONMENT }} images to ${{ env.ENVIRONMENT }}-${{ env.IMAGE_TAG }}"
        git push origin main

        echo "✅ 매니페스트 업데이트 완료. ArgoCD가 자동으로 배포합니다."