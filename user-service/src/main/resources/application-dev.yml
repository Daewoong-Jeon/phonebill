spring:
  datasource:
    url: jdbc:${DB_KIND:postgresql}://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:phonebill_auth}
    username: ${DB_USERNAME:phonebill_user}
    password: ${DB_PASSWORD:phonebill_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000      
  # JPA 설정
  jpa:
    show-sql: ${SHOW_SQL:true}
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
    hibernate:
      ddl-auto: ${DDL_AUTO:update}
      
  # Redis 설정
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
      database: ${REDIS_DATABASE:0}
      
# 개발환경 로깅 설정 (더 상세한 로그)
logging:
  level:
    com.phonebill: DEBUG
    org.springframework.security: DEBUG
    org.springframework.data.redis: DEBUG
    org.springframework.cache: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
    org.springframework.transaction: DEBUG
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] - %msg%n"
    
# 개발환경 액추에이터 설정 (모든 엔드포인트 노출)
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
      show-components: always
      
# 개발용 CORS 설정
cors:
  allowed-origins:
    - "http://localhost:3000"
    - "http://localhost:3001" 
    - "http://127.0.0.1:3000"
  allowed-methods:
    - GET
    - POST
    - PUT
    - DELETE
    - OPTIONS
  allowed-headers: "*"
  allow-credentials: true
  max-age: 3600
  
# 개발환경 보안 설정 (덜 엄격)
auth:
  password:
    bcrypt-strength: 10  # 개발환경에서는 빠른 처리를 위해 낮춤