# API Gateway 운영 환경 설정

server:
  port: 8080
  netty:
    connection-timeout: 20s
    idle-timeout: 30s
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  http2:
    enabled: true

spring:
  profiles:
    active: prod
  
  # Redis 설정 (운영용) - 현재 사용하지 않음
  # data:
  #   redis:
  #     host: ${REDIS_HOST:redis-cluster.unicorn.com}
  #     port: ${REDIS_PORT:6379}
  #     database: ${REDIS_DATABASE:0}
  #     password: ${REDIS_PASSWORD}
  #     timeout: 2000ms
  #     ssl: true  # 운영환경에서는 SSL 사용
  #     lettuce:
  #       pool:
  #         max-active: 20
  #         max-wait: 2000ms
  #         max-idle: 10
  #         min-idle: 5
  #       cluster:
  #         refresh:
  #           adaptive: true
  #           period: 30s

  # Cloud Gateway 운영환경 설정
  cloud:
    gateway:
      default-filters:
        # - name: RequestRateLimiter  # Redis 사용하지 않으므로 주석처리
        #   args:
        #     redis-rate-limiter.replenishRate: 500  # 운영환경 적정 한도
        #     redis-rate-limiter.burstCapacity: 1000
        #     key-resolver: "#{@userKeyResolver}"
        - name: RequestSize
          args:
            maxSize: 5MB  # 요청 크기 제한
      globalcors:
        cors-configurations:
          '[/**]':
            allowed-origins:
              - "https://app.phonebill.com"
              - "https://admin.phonebill.com"
              - "https://*.unicorn.com"
            allowed-methods:
              - GET
              - POST
              - PUT
              - DELETE
            allowed-headers:
              - Authorization
              - Content-Type
              - X-Requested-With
            allow-credentials: true
            max-age: 3600

# JWT 설정 (운영용 - 보안 강화)
app:
  jwt:
    secret: ${JWT_SECRET}  # 환경변수에서 주입 (필수)
    access-token-validity-in-seconds: 1800   # 30분 (보안 강화)
    refresh-token-validity-in-seconds: 86400 # 24시간

# Circuit Breaker 설정 (운영환경 - 엄격한 설정)
resilience4j:
  circuitbreaker:
    instances:
      auth-service-cb:
        failure-rate-threshold: 50
        slow-call-rate-threshold: 60
        slow-call-duration-threshold: 3s
        wait-duration-in-open-state: 30s
        sliding-window-size: 100
        minimum-number-of-calls: 20
        permitted-number-of-calls-in-half-open-state: 10
      bill-service-cb:
        failure-rate-threshold: 50
        slow-call-rate-threshold: 60
        slow-call-duration-threshold: 5s
        wait-duration-in-open-state: 30s
        sliding-window-size: 100
        minimum-number-of-calls: 20
      product-service-cb:
        failure-rate-threshold: 50
        slow-call-rate-threshold: 60
        slow-call-duration-threshold: 5s
        wait-duration-in-open-state: 30s
        sliding-window-size: 100
        minimum-number-of-calls: 20
      kos-mock-cb:
        failure-rate-threshold: 60
        slow-call-rate-threshold: 70
        slow-call-duration-threshold: 10s
        wait-duration-in-open-state: 60s
        sliding-window-size: 50
        minimum-number-of-calls: 10
  
  retry:
    instances:
      default:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.net.ConnectException
          - java.net.SocketTimeoutException
          - org.springframework.web.client.ResourceAccessException

# Actuator 설정 (운영환경 - 보안 강화)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway  # 필요한 것만 노출
      base-path: /actuator
  endpoint:
    health:
      show-details: never  # 운영환경에서는 상세 정보 숨김
      show-components: never
    gateway:
      enabled: true
    shutdown:
      enabled: false  # 운영환경에서는 비활성화
  health:
    redis:
      enabled: true
    circuitbreakers:
      enabled: true
  info:
    env:
      enabled: false  # 환경 정보 숨김
    java:
      enabled: true
    build:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

# 로깅 설정 (운영환경 - 성능 고려)
logging:
  level:
    com.unicorn.phonebill.gateway: INFO
    org.springframework.cloud.gateway: WARN
    reactor.netty: WARN
    io.netty: WARN
    root: WARN
  file:
    name: /var/log/api-gateway/api-gateway.log
    max-size: 500MB
    max-history: 30
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
  loggers:
    org.springframework.security: WARN
    org.springframework.web: WARN

# OpenAPI 설정 (운영환경 - 비활성화)
springdoc:
  api-docs:
    enabled: false  # 운영환경에서는 비활성화
  swagger-ui:
    enabled: false  # 운영환경에서는 비활성화

# CORS 설정은 위의 spring.cloud.gateway 섹션에서 설정됨

# 보안 설정
security:
  headers:
    frame:
      deny: true
    content-type:
      nosniff: true
    xss:
      protection: true

# JVM 튜닝 (운영환경)
jvm:
  heap:
    initial: 512m
    maximum: 1024m
  gc:
    algorithm: G1GC
  options: 
    - "-server"
    - "-XX:+UseG1GC"
    - "-XX:G1HeapRegionSize=16m"
    - "-XX:+UseStringDeduplication"
    - "-XX:+OptimizeStringConcat"
    - "-XX:+UnlockExperimentalVMOptions"
    - "-XX:+UseJVMCICompiler"

# 모니터링 및 트레이싱
tracing:
  enabled: true
  sampling:
    probability: 0.1  # 10% 샘플링
  zipkin:
    base-url: ${ZIPKIN_BASE_URL:http://zipkin.monitoring.unicorn.com:9411}

# 애플리케이션 정보 (운영환경)
info:
  app:
    environment: production
    security-level: high
    monitoring: enabled